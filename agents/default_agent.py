"""
Default Agent for handling general questions and queries outside other categories
"""
from crewai import Agent, Task
from langchain_openai import ChatOpenAI
from typing import Any


class DefaultAgent:
    """
    Fallback agent to handle general questions or queries that don't fit other categories
    (e.g., "What is the currency in Vietnam?", "What's the weather like?", etc.)
    """
    
    def __init__(self, llm):
        self.agent = Agent(
            role="ü§ñ Chuy√™n Vi√™n T∆∞ V·∫•n Du L·ªãch T·ªïng Qu√°t",
            goal="Tr·∫£ l·ªùi c√°c c√¢u h·ªèi chung v·ªÅ du l·ªãch Vi·ªát Nam, th√¥ng tin vƒÉn h√≥a, ti·ªÅn t·ªá, giao th√¥ng v√† c√°c v·∫•n ƒë·ªÅ kh√¥ng thu·ªôc v·ªÅ ·∫©m th·ª±c, ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ hay l·ªãch tr√¨nh.",
            backstory="Chuy√™n vi√™n t∆∞ v·∫•n du l·ªãch v·ªõi ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ Vi·ªát Nam, c√≥ kh·∫£ nƒÉng tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi chung v·ªÅ vƒÉn h√≥a, phong t·ª•c, ti·ªÅn t·ªá, giao th√¥ng, th·ªùi ti·∫øt, visa v√† c√°c th√¥ng tin h·ªØu √≠ch kh√°c cho du kh√°ch.",
            llm=llm,
            allow_delegation=False,
            tools=[]  # No specific tools needed, relies on LLM knowledge
        )
    
    def create_task(self, request: str, context: dict = None) -> Task:
        """Create task for handling general queries"""
        
        context_info = ""
        if context and context.get("current_context", {}).get("current_destination"):
            destination = context["current_context"]["current_destination"]
            context_info = f"\nTh√¥ng tin b·ªëi c·∫£nh: Ng∆∞·ªùi d√πng ƒëang quan t√¢m ƒë·∫øn {destination}."
        
        desc = f"""
            C√¢u h·ªèi c·ªßa kh√°ch: "{request}"{context_info}

            Nhi·ªám v·ª•:
            1. Ph√¢n t√≠ch c√¢u h·ªèi ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i th√¥ng tin kh√°ch c·∫ßn.
            2. Cung c·∫•p th√¥ng tin ch√≠nh x√°c, h·ªØu √≠ch v√† th·ª±c t·∫ø v·ªÅ:
               - Ti·ªÅn t·ªá v√† t·ª∑ gi√° h·ªëi ƒëo√°i
               - Visa v√† th·ªß t·ª•c nh·∫≠p c·∫£nh
               - Giao th√¥ng c√¥ng c·ªông v√† di chuy·ªÉn
               - VƒÉn h√≥a v√† phong t·ª•c
               - Th·ªùi ti·∫øt theo m√πa
               - Ng√¥n ng·ªØ v√† giao ti·∫øp
               - M·∫πo v√† l∆∞u √Ω an to√†n
               - Th√¥ng tin chung kh√°c v·ªÅ Vi·ªát Nam
            3. N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ, h√£y ƒë∆∞a ra l·ªùi khuy√™n chung ph√π h·ª£p.
            4. ƒê∆∞a ra c√°c g·ª£i √Ω b·ªï sung ho·∫∑c th√¥ng tin li√™n quan c√≥ th·ªÉ h·ªØu √≠ch.
            5. N·∫øu c√¢u h·ªèi qu√° c·ª• th·ªÉ v√† c·∫ßn chuy√™n gia kh√°c, h√£y ƒë·ªÅ xu·∫•t ng∆∞·ªùi d√πng h·ªèi c·ª• th·ªÉ h∆°n.

            Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† d·ªÖ hi·ªÉu.
        """
        
        return Task(
            description=desc,
            agent=self.agent,
            expected_output="Th√¥ng tin h·ªØu √≠ch v√† ch√≠nh x√°c tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch, k√®m theo c√°c g·ª£i √Ω b·ªï sung n·∫øu ph√π h·ª£p."
        )
    
    def handle_currency_question(self) -> str:
        """Handle currency-related questions"""
        return """
üí∞ **Ti·ªÅn t·ªá Vi·ªát Nam:**
- ƒê∆°n v·ªã: ƒê·ªìng Vi·ªát Nam (VND)
- K√Ω hi·ªáu: ‚Ç´ ho·∫∑c VND
- M·ªánh gi√°: 10,000‚Ç´, 20,000‚Ç´, 50,000‚Ç´, 100,000‚Ç´, 200,000‚Ç´, 500,000‚Ç´
- T·ª∑ gi√°: ~23,000-25,000 VND = 1 USD (thay ƒë·ªïi)
- ƒê·ªïi ti·ªÅn: Ng√¢n h√†ng, ti·ªám v√†ng, s√¢n bay
- Th·∫ª ATM: ƒê∆∞·ª£c ch·∫•p nh·∫≠n r·ªông r√£i ·ªü th√†nh ph·ªë l·ªõn
"""
    
    def handle_visa_question(self) -> str:
        """Handle visa-related questions"""
        return """
üìã **Visa Vi·ªát Nam:**
- **Mi·ªÖn visa 45 ng√†y:** 13 qu·ªëc gia (ƒê·ª©c, Ph√°p, Anh, √ù, T√¢y Ban Nha...)
- **Mi·ªÖn visa 30 ng√†y:** ASEAN, Nh·∫≠t B·∫£n, H√†n Qu·ªëc, Nga...
- **E-visa:** ƒêƒÉng k√Ω online, 30 ng√†y, 1 l·∫ßn nh·∫≠p c·∫£nh
- **Visa du l·ªãch:** 30 ng√†y, c√≥ th·ªÉ gia h·∫°n
- **Y√™u c·∫ßu:** H·ªô chi·∫øu c√≤n 6 th√°ng, v√© m√°y bay kh·ª© h·ªìi
- **Website ch√≠nh th·ª©c:** evisa.xuatnhapcanh.gov.vn
"""
    
    def handle_transportation_question(self) -> str:
        """Handle transportation questions"""
        return """
üöó **Giao th√¥ng Vi·ªát Nam:**
- **M√°y bay:** N·ªôi ƒë·ªãa gi√° r·∫ª (VietJet, Bamboo Airways)
- **T√†u h·ªèa:** B·∫Øc-Nam, cabin gi∆∞·ªùng n·∫±m, c·∫£nh ƒë·∫πp
- **Xe kh√°ch:** Gi∆∞·ªùng n·∫±m, r·∫ª nh·∫•t, nhi·ªÅu tuy·∫øn
- **Grab/Gojek:** Xe √¥m, taxi, delivery ·ªü th√†nh ph·ªë
- **Xe m√°y:** Thu√™ 150,000-300,000‚Ç´/ng√†y
- **√î t√¥:** C·∫ßn b·∫±ng l√°i qu·ªëc t·∫ø
- **Xe bus:** R·∫ª nh∆∞ng ch·∫≠m, ph√π h·ª£p ng√¢n s√°ch th·∫•p
"""
    
    def handle_weather_question(self) -> str:
        """Handle general weather questions"""
        return """
üå§Ô∏è **Th·ªùi ti·∫øt Vi·ªát Nam:**
- **Mi·ªÅn B·∫Øc:** 4 m√πa r√µ r·ªát
  - Xu√¢n (3-4): ·∫§m √°p, m∆∞a ph√πn
  - H√® (5-8): N√≥ng ·∫©m, m∆∞a l·ªõn
  - Thu (9-11): M√°t m·∫ª, ƒë·∫πp nh·∫•t
  - ƒê√¥ng (12-2): L·∫°nh, kh√¥
- **Mi·ªÅn Trung:** 2 m√πa
  - Kh√¥ (1-8): N·∫Øng n√≥ng
  - M∆∞a (9-12): M∆∞a b√£o nhi·ªÅu
- **Mi·ªÅn Nam:** Nhi·ªát ƒë·ªõi
  - Kh√¥ (11-4): √çt m∆∞a, m√°t
  - M∆∞a (5-10): M∆∞a chi·ªÅu, n√≥ng ·∫©m
"""
